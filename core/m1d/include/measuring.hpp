/**
 * @file measuring.hpp
 * @brief Functions for 1D measuring.
 */

#ifndef MEASURING_MEASURING_HPP
#define MEASURING_MEASURING_HPP

#include "measureHandle.hpp"

/**
 * @enum TransitionType
 * @brief Whether to extract all edges, or just light->dark or dark->light edges.
 */
enum class TransitionType{
    ALL,
    POSITIVE,
    NEGATIVE
};

/**
 * @enum SelectType
 * @brief Select all edges detected, or just the first or last edge.
 */
enum class SelectType {
    ALL,
    FIRST,
    LAST
};

/**
 * @brief A structure to represent the position of each edge and the distances between consecutive edges.
 *
 * The purpose of the result structs is to return information about the measurements in the measuring functions, so
 * move semantics are used instead of copying to avoid copying data when returning the information.
 * std::move is called on the parameters to the constructor, so they should not be used after calling the constructor.
 */
struct PosDistanceResult {
    // Default constructor
    PosDistanceResult() = default;

    // Constructor
    PosDistanceResult(std::vector<cv::Point2d> &pos_, std::vector<double> &distances_);

    // Copy constructor
    PosDistanceResult(const PosDistanceResult &obj) = default;

    // Move constructor
    PosDistanceResult(PosDistanceResult &&obj) noexcept;

    /** Position of each edge represented as (row, column) points */
    std::vector<cv::Point2d> pos;

    /** Distances between consecutive edges (empty if select is not 'all'). */
    std::vector<double> distances;
};

/**
 * @brief A structure to represent the results of the measurePos function.
 */
struct MeasurePosResult : PosDistanceResult {
    // Constructor
    MeasurePosResult(PosDistanceResult &pos, std::vector<double> &amplitudes_);

    /** Signed amplitude of each edge. */
    std::vector<double> amplitudes;
};

/**
 * @brief A structure to represent the results of the measurePairs function.
 */
struct MeasurePairsResult {
    // Default constructor
    MeasurePairsResult() = default;

    // Constructor
    MeasurePairsResult(std::vector<cv::Point2d> &posFirst_, std::vector<double> &amplitudesFirst_,
                       std::vector<cv::Point2d> &posSecond_, std::vector<double> &amplitudesSecond_,
                       std::vector<double> &intraDistance_, std::vector<double> &interDistance_);

    /** Position (row, column) of the first edge of each pair. */
    std::vector<cv::Point2d> posFirst;
    /** Amplitude of the first edge of each pair. */
    std::vector<double> amplitudesFirst;

    /** Position of the second edge of each pair. */
    std::vector<cv::Point2d> posSecond;
    /** Amplitude of the second edge of each pair. */
    std::vector<double> amplitudesSecond;

    /** Distance between the edges of each pair. */
    std::vector<double> intraDistance;
    /** Distance between consecutive edge pairs. */
    std::vector<double> interDistance;

    // Return a MeasurePairsResult struct with just the first element of each data field
    MeasurePairsResult front();

    // Return a MeasurePairsResult struct with just the last element of each data field
    MeasurePairsResult back();
};

/**
 * @fn cv::Mat measureProjection(const cv::Mat &img, const MeasureHandle &measureHandle)
 * @brief Extract a one-dimensional gray value profile perpendicular to a rectangle or annular arc.
   @details This is done by taking the mean of the 2D image across the axis perpendicular to the major axis of
    the rectangle or the annular arc.

 * @param img Single-channel input image
 * @param measureHandle The MeasureHandle object. This determines the region of interest.
 * @return The one-dimensional gray-value profile.
 */
cv::Mat measureProjection(const cv::Mat &img, const MeasureHandle &measureHandle);

cv::Mat measureProjection(const cv::Mat &img, const MeasureHandle &measureHandle, double cx, double cy);

/**
 * @fn measurePos(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
                            TransitionType transition, SelectType select)
   @brief Find the position of straight edges perpendicular to a rectangle or an annular arc.
   @details Initially, the region of interest is extracted from the image using the measure object.
    To extract the edges, gaussian smoothing is applied to pre-process the image and the
    derivative of the image is found by convolving the image with a derivative kernel. Then,
    a 1D array is generated by averaging the gray values in each row (or column).
    The function takes the edges that have an amplitude greater than the threshold
    value, and returns the positions and signed amplitudes of those edges.

 * @tparam T Either MeasureRectangle or MeasureArc.
 * @param img Single-channel input image.
 * @param measureHandle The MeasureHandle object. This determines the region of interest.
 * @param sigma Standard deviation for gaussian smoothing. \n
 *  Range of values: 0.4 <= sigma <= 100
 * @param threshold Minimum edge amplitude. \n
 *  Range of values: 0 <= threshold <= 255
 * @param transition Detect all edges, or just dark->light or light->dark edges.
 * @param select Return all edges found, or just the first or the last one.
 * @return A MeasurePosResult struct containing the row, column coordinate, amplitude of each edge and the distance
 *  between each consecutive edge.
 */
template <typename T>
MeasurePosResult measurePos(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
                            TransitionType transition = TransitionType::ALL, SelectType select = SelectType::ALL);

/**
 * @fn measurePairs(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
             TransitionType transition = TransitionType::ALL, SelectType select = SelectType::ALL, bool pickStrongest = false);
 * @brief Find the position of straight edge pairs perpendicular to a rectangle or an annular arc.
 * @details The edge detection algorithm of this function is the same as that of measurePos, but
        this function finds edge pairs instead of individual edges. The function returns the
        position and the amplitude of each edge pair, as well as the distance between each
        edge pair and the distance between consecutive edge pairs.

 * @tparam T Either MeasureRectangle or MeasureArc.
 * @param img Single-channel input image.
 * @param measureHandle The MeasureHandle object. This determines the region of interest.
 * @param sigma Standard deviation for gaussian smoothing. \n
 *  Range of values: 0.4 <= sigma <= 100
 * @param threshold threshold Minimum edge amplitude. \n
 *  Range of values: 0 <= threshold <= 255
 * @param transition TransitionType::POSITIVE: dark->light->dark edge pairs are detected. \n
 * TransitionType::NEGATIVE: light->dark->light edge pairs are detected. \n
 * TransitionType::ALL: the detection is based on the first detected edge. If the first
                edge is a positive edge, then positive edge pairs will be detected, and
                vice versa.
 *
 * @param select Return all edge pairs found, or just the first or the last one.
 * @param pickStrongest If there are more than one consecutive edge with the same polarity, the
            first one will be used for the edge pair. But if pickStrongest is true, the one with
            the maximum amplitude will be used for the edge pair.
 * @return A MeasurePairsResult struct containing the row, column coordinate, amplitude of each edge pair, the distance
 *  between the edges of each pair and the distance between consecutive edge pairs.
 */
template <typename T>
MeasurePairsResult
measurePairs(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
             TransitionType transition = TransitionType::ALL, SelectType select = SelectType::ALL, bool pickStrongest = false);

/**
 * @fn PosDistanceResult measureThresh(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
                                SelectType select = SelectType::ALL)

 * @brief Find points in a measure handle with a particular gray value in a rectangle or annular arc.
 * @tparam T Either MeasureRectangle or MeasureArc.
 * @param img Single-channel input image.
 * @param measureHandle The MeasureHandle object. This determines the region of interest.
 * @param sigma Standard deviation for gaussian smoothing.
 * @param threshold Gray value to look for.
 * @param select Return all edges found, or just the first or the last one.
 * @return A struct containing the row and column coordinates of each point found and the distance
 *  between each consecutive points.
 */
template <typename T>
PosDistanceResult measureThresh(const cv::Mat &img, const T &measureHandle, double sigma, double threshold,
                                SelectType select = SelectType::ALL);

#endif